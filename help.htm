<!DOCTYPE HTML>
<html><head><meta charset="utf-8">
<title>Columns++ for Notepad++</title>
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<style>
html, body                   {margin: 0; padding: 0; width: 100%; height: 100%;}
body                         {display: flex; flex-direction: column; font: 1em Calibri, Tahoma, sans-serif;}

header                       {padding: 0; width: 100%; display: flex; flex-direction: row; justify-content: space-around;}
header                       {border-style: none none solid none; border-width: 0 0 2px 0;}
header                       {font-size: min(5vw,10vh,1.75rem); font-weight: bold;}

footer                       {padding: 4px 0; width: 100%; display: flex; flex-direction: row; align-items: center; font-size: medium;}
footer                       {border-style: solid none none none; border-width: 2px 0 0 0;}
footer a[rel=license]        {padding: 0 8px; text-decoration: none;}
footer a[rel=license] img    {border: none;}

#foottext                    {flex: 1; margin: 0 1em; text-align: center;}
#foottext a                  {white-space: nowrap; text-decoration: none; color: inherit; }
#foottext a:hover            {text-decoration: underline;}
#foottext.linklist a:link    {color: #00c;}
#foottext.linklist a:visited {color: #900;}

#fontdown, #fontup           {margin: 0 8px; padding: 0; height: 28px; width: 48px; text-align: center; display: none;}
#fontdown, #fontup           {color: #000; border: none; border-radius: 15%/20%; cursor: pointer;}
#fontdown, #fontup           {background: transparent;}
#fontdown:hover,
#fontup:hover                {background: #333; color: #fff;}
#fontdown                    {font: inherit; font-size: 13px;}
#fontup                      {font: inherit; font-size: 19px; line-height: 1.0;}

main                         {flex: 1; overflow: auto;}
article                      {padding: 0 1em; line-height: 1.4;}
p                            {margin: 0; padding: 0;}
p + p                        {margin: .5em 0 0 0; padding: 0;}
h1                           {line-height: 1.25; margin: .5em 0 0 0;}
h1                           {font-size: 1.5rem; text-align: center; font-weight: bold; font-style: normal; padding: 0;}
h2                           {font-size: 1.2rem; text-align: left;   font-weight: bold; font-style: normal; padding: 0; margin: 0;}
h3                           {font-size: 1rem;   text-align: left;   font-weight: bold; font-style: normal; padding: 0; margin: 0;}

main a                       {white-space: nowrap; text-decoration: none;}
main a:link                  {color: #00c;}
main a:visited               {color: #900;}
main a:hover                 {text-decoration: underline;}

@media (max-width:  480px)   {
    main      a {white-space: normal;}
    #foottext a {white-space: normal;}
}

main article section         {border-style: none; border-width: 0; padding: 0 1em .3em 1em; background: #eee;}
main article section         {margin: 1.25rem 0 .4rem 0;}
main article section h2      {border-style: none none solid none; border-width: 0 0 1px 0;}
main article section h2      {margin: 0 0 .3em -6px; padding: .2em 0 .2em 6px;}
main article section h3      {border-style: none none solid none; border-width: 0 0 1px 0;}
main article section h3      {margin: .3em 0 .2em 0; padding: .2em 0 .1em 0; line-height: 1.2;}
main article h1+section      {margin-top: .75rem;}
main article h1+p            {margin-top: .6em;}
main article section+p       {margin-top: .75em;}
main article section >
             p:first-child   {margin-top: .3em;}

main article section.note    {font-size: .85em; border-style: solid; border-width: 3px 1px 1px 6px; padding: 0 6px;}

body h1              {margin: 0;}
body .pagenav        {font-weight: bold; text-align: center; margin: .5em .5em 0 .5em; line-height: 1.6; background: #eee;}
body .pagenav a      {margin: 0 .5em; white-space: nowrap;} /* nowrap overrides main a {white-space: normal;} in @media rule */

@media (min-width: 640px) {
   body main         {display: flex; flex-direction: row; padding: 0;}
   body .pagenav     {padding: .5em 0 0 0; margin: 1.25em 1em .4em;}
   body .pagenav     {white-space: pre;}
   body article      {flex: 1; overflow: auto; padding: 0 1em 0 0;}
   body h1           {margin-top: .5em;}
}

body #centershortlines ~ article h1        {max-width: calc(32em + 12px);}
body #centershortlines ~ article section   {max-width: 48em;}

p.subsub            {margin-left: 1.5em;}


table.optionsTable        {border: none; margin: 1em 0 1em 1em; border-collapse: collapse;}
table.optionsTable th     {padding: .5em .5em .5em .5em; font-weight: bold;   text-align: left; vertical-align: top; border: 1px solid black;}
table.optionsTable td     {padding: .5em .5em .5em .5em; font-weight: normal; text-align: left; vertical-align: top; border: 1px solid black;}
table.optionsTable .group {text-align: center; background: #d0d0d0; }

ul.optionslist    {margin-top: .5em; margin-bottom: .5em;}
ul.optionslist li {font-weight: bold;}

span.mnemonic {color: #fff; background: #000; padding: 0 .2em; border-radius: .2em; font-size: .9em; font-weight: bold; display: inline-block;}

body                {color: #000; background: #d0d0d0; line-height: 1.4;}
*                   {border-color: #999;}
#centershortlines   {width: calc((100vw - (13.5em + 48em + 2em + 24px)) / 2);}

</style>
<script>
function doPageLoad() {
    if (document.getElementById("fontdown")) {
        document.getElementById("fontdown").style.display = "inline-block";
        document.getElementById("fontup").style.display = "inline-block";
        if (window.localStorage) {
            var n = localStorage.getItem("ColumnsPlusPlusFontSize");
            if (!isNaN(n) && n >= 9 && n <= 40) {
                document.documentElement.style.fontSize = n + "px";
                document.documentElement.style.fontSize = n + "px";
            }
        }
    }
}

function setFontDown() {
    var n = parseFloat(window.getComputedStyle(document.documentElement).fontSize);
    if (n > 9) --n;
    document.documentElement.style.fontSize = n + "px";
    if (window.localStorage) localStorage.setItem("ColumnsPlusPlusFontSize", n);
}

function setFontUp() {
    var n = parseFloat(window.getComputedStyle(document.documentElement).fontSize);
    if (n < 40) ++n;
    document.documentElement.style.fontSize = n + "px";
    if (window.localStorage) localStorage.setItem("ColumnsPlusPlusFontSize", n);
    if (window.getComputedStyle(document.body).display == "block") window.scrollBy(0,10000);
}

window.addEventListener("load", doPageLoad);
</script>
</head>
<body>

<header>Columns++ for Notepad++ documentation</header>

<main>

<div id=centershortlines></div>

<nav class=pagenav><a href="#introduction">Introduction</a>
<a href="#purpose"    >Purpose and limitations</a>
<a href="#elastic"    >Elastic tabstops</a>
<a href="#rectangular">Rectangular selections</a>
<a href="#search"     >Search</a>
<a href="#calculation">Calculation</a>
<a href="#formulas"   >Formulas</a>
<a href="#alignment"  >Alignment</a>
<a href="#sorting"    >Sorting</a>
<a href="#conversion" >Conversion</a>
<a href="#options"    >Options</a></nav>

<article>

<section id=introduction><h2>Introduction</h2>

<p><strong>Columns++</strong> is a plugin for <a href="https://notepad-plus-plus.org/">Notepad++</a> offering various features for working with text and data arranged in columns. Like <strong>Notepad++</strong>, <strong>Columns++</strong> is released under the <a href="https://www.gnu.org/licenses/gpl.html">GNU General Public License</a> (either <a href="https://www.gnu.org/licenses/gpl-3.0.html">version 3</a> of the License, or, at your option, any later version). <strong>Columns++</strong> was first released by <a href="http://www.coises.com/">Randall Joseph Fellmy</a> in 2023; you can find the source code  on <a href="https://github.com/Coises/ColumnsPlusPlus">GitHub</a>.</p>

<p><strong>Columns++</strong> uses the <a href="https://github.com/ArashPartow/exprtk">C++ Mathematical Expression Toolkit Library (ExprTk)</a> by <a href="https://www.partow.net/">Arash Partow</a>, which is released under the <a href="https://www.opensource.org/licenses/MIT">MIT license</a>, to implement <a href="#formulas">formulas</a>.

</section>

<section id=purpose><h2>Purpose and limitations</h2>

<p><strong>Columns++</strong> is designed to provide some helpful functions for editing text or data that is lined up visually in columns, so that you can make a rectangular selection of the column(s) you want to process.</p>

<p>The integrated implementation of <a href="#elastic">Elastic tabstops</a> works to line up columns when tabs are used as logical separators, including tab-separated values data files as well as any ordinary text or code document containing sections in which you want to line up columns easily using tabs. You can use this feature on its own or with the other functions in <strong>Columns++</strong>.</p>

<p><strong>Columns++</strong> is optimized for use with Elastic tabstops. It also works with files that use traditional, fixed tabs for alignment, or no tabs at all; however, you should ordinarily select only one column at a time in files that don’t use Elastic tabstops.</p>

<p><strong>Columns++</strong> is generally not helpful when columns do not line up visually, such as in comma-separated values files. However, Columns++ can convert between delimiter-separated values and tabbed presentation.</p>

<p>Elastic tabstops can cause loading and editing to be slow for large files. By default, Elastic tabstops is automatically turned off for files over 1000 KB or 5000 lines. You can change these limits.</p>


</section>

<section id=elastic><h2>Elastic tabstops</h2>

<p><strong>Columns++</strong> includes a new implementation of Nick Gravgaard’s <a href="https://nickgravgaard.com/elastic-tabstops/">Elastic tabstops</a>. (<em>Please note that as of this writing I have not communicated with Mr. Gravgaard about my implementation of his proposal, and no endorsement on his part is implied. — RJF</em>)</p>

<p>The first item of the <strong>Columns++</strong> menu enables or disables <strong>Elastic tabstops</strong>. <strong>Elastic tabstops</strong> stretches tabs so that columns line up to fit their content, using only a single tab to separate one column from the next.</p>

<p>This implementation of <strong>Elastic tabstops</strong> includes some options that were not part of the original proposal. These options can be accessed by using the <strong>Profile...</strong> menu option. There are three “built-in” profiles:</p>

<table class=optionsTable>
<tr><th>Classic</th><td>endeavors to reproduce precisely the behavior described in the proposal linked above.</td></tr>
<tr><th>General</th><td>ensures that leading tabs are always used for indentation, and are not lined up with elastic tabstops.</td></tr>
<tr><th>Tabular</th><td>is suitable for tab-separated values files, in which the entire file is a single table with the values in each row separated by single tabs.</td></tr>
</table>

<p>You can select a profile from the drop-down box in the <strong>Elastic tabstops profile</strong> dialog. You can also change individual settings; choose some options to automatically enable a profile or disable elastic tabstops for different types of files; and save, rename or delete profiles.</p>

<h3>Settings in an elastic tabstops profile</h3>

<p>Along with the enabled or disabled status of elastic tabstops, the settings in an elastic tabstops profile are kept independently for each document you have open. These settings, which are available in the <strong>Elastic tabstops profile</strong> dialog, are:</p>

<table class=optionsTable>
<tr><th>Use leading tabs for indentation only; don't make them elastic.</th><td>When checked, this option treats tabs which occur at the beginning of a line, before the first non-tab character, as ordinary fixed-width tabs instead of elastic tabs. Without this option, a line with a tab used to line up a column of data cannot be followed by a line that uses tabs for indentation without an intervening blank line; otherwise, the first leading tab will expand to line up with the tab on the previous line. The disadvantage is that if you want an empty column at the beginning of a line, you must place a space before the first tab to make it line up with the next column.</td></tr>
<tr><th>Line up elastic tabstops throughout the entire document.</th><td>Normally elastic tabstops are positioned independently whenever a column is interrupted; that is, tabstops created by tabs that appear on adjacent lines are lined up, but they don’t “project through” lines with fewer (or no) tabs. This option indicates that a single set of tabstops is to be used for the entire document, so that columns line up even when intervening lines have fewer columns.</td></tr>
<tr><th>Do not allow text following the last tab on a line to span columns.</th><td>Normally, text following the last tab on a line is not treated as belonging to a “column” at all. This makes sense for documents that mix text and tables. However, for documents that are entirely tabular but have omitted tabs at the end of lines where the final columns are blank, this option (along with the one above) is needed to keep things lined up properly.</td></tr>
<tr><th>Override default/language tab size (used for indent or minimum):</th><td>Elastic tabstops uses the “tab size” in different ways depending on whether <strong>Use leading tabs for indentation only</strong> is checked: when checked, the tab size represents the number of spaces each leading tab indents, and it is otherwise ignored; when unchecked, it is the minimum space between any two tabstops (that is, the width of the intervening column plus the space between columns). When the <strong>Override tab size</strong> box is unchecked, <strong>Columns++</strong> uses the tab size set in <strong>Notepad++</strong>; when checked, the spin box to the right specifies the size (in spaces) to be used.</td></tr>
<tr><th>Minimum space between elastic columns:</th><td>This spin box specifies the size (in spaces) occupied by the tab following the longest span of text in a column.</td></tr>
<tr><th>Apply monospaced font optimizations:</th><td>

<p>Responsiveness with elastic tabstops enabled is greatly improved if it is possible to calculate the width of text by counting characters rather than by measuring. This only works if the fonts in use are monospaced (typewriter-like fonts in which every character has the same width; also called fixed pitch fonts), and all the fonts used by the styles in the current language have the same width.</p>
<table class=optionsTable>
<tr><th>Yes</th><td>Monospaced font optimizations are applied unconditionally.</td></tr>
<tr><th>No</th><td>Monospaced font optimizations are not applied.</td></tr>
<tr><th>Best estimate</th><td>Monospaced font optimizations are applied if they appear to be appropriate. The text <strong>(yes)</strong> or <strong>(no)</strong> following <strong>Best estimate</strong> indicates whether <strong>Columns++</strong> has determined that display of the current document is monospaced.</td></tr>
<tr><th>Don't show expanded mnemonics for non-printing characters when monospaced.</th><td><strong>Notepad++</strong> normally shows mnemonics, like <span class=mnemonic>ESC</span> or <span class=mnemonic>NBSP</span>, for control characters, invalid characters and (at user option) other non-printing characters. While this is usually helpful, it breaks the assumption of monospacing, which can dramatically slow some operations on larger files when monospaced fonts are used. This option (checked by default) displays a simple <span class=mnemonic>!</span> indicator instead of the usual multi-character mnemonics when elastic tabstops are enabled and monospaced font optimizations are in effect.</td></tr>
</table>
<p>Usually it’s best to let <strong>Columns++</strong> determine whether to use monospaced font optimizations, but there can be exceptional cases. <strong>Columns++</strong> checks the width of a space and a capital letter W in each font assigned to a style in the current language; if these are all the same, it uses monospace optimizations. In some cases, a language might define styles which inhibit optimization but are never applied in a particular file; for large files, the performance gain from forcing monospaced font optimizations may be considerable. Conversely, a font might use monospaced characters in the ASCII range but wider characters outside that range; in this case, monospaced font optimizations can cause processing to be much slower than necessary, since each line in which text overflows the expected width in any column forces additional measurement and layout of text. If you want to use elastic tabstops with a large file, but response is sluggish and the best estimate chosen by <strong>Columns++</strong> seems wrong, it’s worth trying the opposite setting.</p>
</td></tr>
</table>

<p>These settings are only applied when you click the <strong>OK</strong> button near the bottom right of the dialog.</p>

<h3>Saving, renaming and deleting profiles</h3>

<p>You can save the settings in a profile by clicking the <strong>Save As...</strong> button to the right of the profile selection drop-down box. You can give the profile any name that does not begin with an asterisk or an open parenthesis and is not one of the three built-in profiles (“Classic,” “General” and “Tabular”). You can use the additional options from the drop-down menu at the right of the <strong>Save As...</strong> button to rename or delete a profile. If you have made changes to an existing profile that is not a built-in profile, you can save the changes without having to type the profile name again by using the <strong>Save</strong> option.</p>

<h3>Automatically enabling or disabling elastic tabstops</h3>

<p>By default, <strong>Columns++</strong> uses whatever settings were in effect for the last active tab when you open a file or a new tab. You can change this behavior with the remaining options on the <strong>Elastic tabstops profile</strong> dialog.</p>

<p>The checkbox under the profile selection dropdown labeled <strong>Automatically enable this profile when opening <em>type</em> files.</strong> is available when a built-in or saved profile is selected (and <strong>Disable... when opening <em>type</em> files.</strong> in the bottom section of the dialog, which will be explained later, is not checked). Checking this box assigned the selected built-in or saved profile to be enabled whenever you open a file of the same <em>type</em> as the one you are currently viewing. The <em>Type</em> can be existing files with the same extension, existing files with no extension, or new files. This option is only applied when you click the <strong>OK</strong> button near the bottom right of the dialog.</p>

<p>The options in the box labeled <strong>When opening an existing file without an explicit rule for its extension</strong> allow you choose what happens when opening existing files for which you haven’t set either <strong>Automatically enable this profile...</strong> or <strong>Disable... when opening...</strong>:</p>

<table class=optionsTable>
<tr><th>keep the same settings as the last viewed tab.</th><td>This is the default behavior: each existing file you open begins with same the elastic tabstops settings you had previously. Note that setting does not affect the default for <em>new</em> files; if you want a profile enabled, or elastic tabstops disabled, whenever you open a new tab with <strong>File|New</strong> you must set that behavior specifically using one of the <strong>when opening new files</strong> options in the <strong>Elastic tabstops profile</strong> dialog opened when viewing a new file.</td></tr>
<tr><th>disable elastic tabstops.</th><td>Elastic tabstops will be turned off when opening any existing file unless you’ve specifically set a rule to turn it on for that file’s extension.</td></tr>
<tr><th>enable this profile:</th><td>You can select any built-in or saved profile, which will be enabled when opening any existing file unless you’ve set a different rule for that file’s extension.</td></tr>
</table>

<p>The options in the box labeled <strong>Disable elastic tabstops (applies to all profiles)</strong> allow you choose specific conditions under which elastic tabstops should always be disabled:</p>

<table class=optionsTable>
<tr><th>when opening <em>type</em> files.</th><td>If you always want elastic tabstops disabled when you open the type of file in the current tab, check this box.</td></tr>
<tr><th>when opening files over ____ KB.</th><td rowspan=2>Elastic tabstops can cause loading and editing to be slow for large files. These options disable elastic tabstops when loading files over the specified limits, regardless of any other settings. The default values disable elastic tabstops for files over 1000 KB or 5000 lines.</td></tr>
<tr><th>when opening files over ____ lines.</th></tr>
</table>

<p>Note that although the options for automatically enabling or disabling elastic tabstops do not affect the tab you have open, they are only applied when you click the <strong>OK</strong> button near the bottom right of the dialog.</p>

</section>

<section id=rectangular><h2>Rectangular selections</h2>

<p>Most of the commands from the <strong>Columns++</strong> menu operate on rectangular selections.

<p>You can select a single column or multiple columns separated by tabs. Since each tab is interpreted as a column separator, this works as expected when elastic tabstops are used. The results with traditional fixed tabs are not likely to be obvious or expected when sequences of multiple fixed tabs are included in the selection, since <strong>Columns++</strong> interprets each tab as starting a new “logical” column without regard to physical placement.</p>

<p>When selecting one or more columns in a document using tabs, you should generally <em>include the tab that ends the rightmost selected column</em> in your selection. Unless all the entries in the last column are the same width, it is often difficult or impossible to get a complete selection without including the final tabs; in any case, <strong>Columns++</strong> will process the trailing tabs intelligently.</p>

<p>When you invoke a command that requires a rectangular selection and the current selection is not a non-zero-width rectangular selection, <strong>Columns++</strong> will inform you of this and, if possible, offer reasonable options to create a rectangular selection based on the current selection or cursor position.</p>

<p>You can enable specific “implicit” rectangular selections in the <a href="#options-autoextend">Options</a> dialog if you would prefer that <strong>Columns++</strong> make those selections without prompting you.</p>

</section>

<section id=search><h2>Search</h2>

<p><strong>Columns++</strong> offers the ability to find and replace within a region marked by an <em>indicator</em>. <strong>Notepad++</strong> uses several indicators, including the 1st to 5th Styles from the Search menu and the Find Mark Style used by the <strong>Mark</strong> function. <strong>Columns++</strong> lets you use any one of those six indicators, or a custom indicator, to define the region for searching.</p>

<p>The <strong>Search...</strong> item on the <strong>Columns++</strong> menu opens the <strong>Search in indicated region</strong> dialog. Most of the options on this dialog are similar to the corresponding <strong>Notepad++</strong> search options.</p>

<p>When you initiate a search, <strong>Columns++</strong> looks for a rectangular selection or a multiple selection from which to create a search region. If you do not have a such a selection but you do have text marked with the indicator you are using for search, the search proceeds within the indicated region. If you have neither a searchable region nor a rectangular or multiple selection, <strong>Columns++</strong> will prompt you to make a selection.</p>

<p>Segments of the indicated region are searched sequentially (forward or backward), one at a time. It is not possible for a single match to span multiple segments. When no more occurrences of the search string can be found, <strong>Columns++</strong> gives a status message to that effect; if focus remains on the search dialog, the next search will resume from the beginning of the region.</p>

<p>The <strong>Indicator</strong> section at the bottom of the <strong>Search in indicated region</strong> dialog lets you select which indicator will be used to identify the search region.</p>

<p>The <strong>Clear automatically</strong> checkbox determines whether an existing indicated region is cleared when the dialog is closed and when initiating a search when you have a rectangular or multiple selection. This option is set to checked when you choose the <strong>Custom Style</strong> indicator and to unchecked when you choose any other indicator; however, you may change it after you select an indicator and it will stick until you change the indicator again.</p>

<p>The <strong>Clear</strong> button in the <strong>Indicator</strong> section clears the current search indicator, so that there is no search region indicated.</p>

<p>It is currently possible to select both <strong>Backward direction</strong> and <strong>Regular expression</strong>; however, this combination may produce unexpected results.</p>

</section>

<section id=calculation><h2>Calculation</h2>

<h3>Calculating in columns</h3>

<p>The <strong>Add numbers...</strong> and <strong>Average numbers...</strong> items on the <strong>Columns++</strong> menu perform calculations on a rectangular selection of a column of numbers, or of multiple columns separated by elastic tabstops. (These commands can be used on selections that include traditional fixed tabs; but the results may not be as expected, since they treat tabs as logical separators, ignoring physical positioning.)</p>

<p><strong>Columns++</strong> shows a dialog to present the results of the calculation. You can select a <strong>Thousands separator</strong> option (<strong>None</strong>, <strong>Comma</strong>/<strong>Period</strong>, <strong>Apostrophe</strong> or <strong>Blank</strong>) to control how the results are formatted. Use the <strong>Insert</strong>...<strong>these results</strong> checkbox to specify whether <strong>Columns++</strong> will insert the results into the document, at the end of the rectangular selection, when you close the dialog. If the last line of the rectangular selection is empty (spaces, tabs and/or virtual space), the option will be to insert the results of the calculation into that space; otherwise, it will be to insert a new line containing the results of the calculation.</p>

<p>Close the dialog with the <strong>Yes</strong> button to copy the results to the clipboard, or use <strong>No</strong> to leave the clipboard unchanged.</p>

<h3 id="calculation-rows">Calculating across rows</h3>

<p>The <strong>Calculate...</strong> command from the <strong>Columns++</strong> menu inserts the results of a calculation into each line of a rectangular selection. The command opens a dialog which lets you supply the formula for the calculation. Formulas are described in <a href="#formulas">a separate section</a>; they are mostly ordinary mathematical expressions, with special <em>variables</em> and <em>functions</em> to represent numbers found in the selection; for example, if a single column of numbers is selected, <strong>this + 20</strong> would add a column with each of the original numbers increased by 20. Here are the options on the <strong>Calculate</strong> dialog:</p>

<table class=optionsTable>
<tr><th>Formula</th><td>Enter the formula for the calculation, as described in the <a href="#formulas">Formulas</a> section.</td></tr>
<tr><th>Regex</th><td>If you enter a regular expression, the first occurrence of the expression within the selection in each row of the rectangular selection is matched. Use the <strong>match case</strong> box to indicate whether to use case-sensitive matching. If <strong>Skip unmatched lines</strong> is checked and the regular expression box is not empty, rows in which the regular expression does not match are ignored; the formula is not evaluated, nor is a tab or any space padding added to the selection in the row to account for the new column.</td></tr>
<tr><th>Thousands separator</th><td>Select a <strong>Thousands separator</strong> option (<strong>None</strong>, <strong>Comma</strong>/<strong>Period</strong>, <strong>Apostrophe</strong> or <strong>Blank</strong>) to control how numeric results are formatted.</td></tr>
<tr><th>Decimal places</th><td>Choose the number of decimal places (0-16) to which to round results. If <strong>Suppress trailing zeros</strong> is checked, zeros at the end of the decimal portion of numbers are omitted; if this box is not checked, exactly the number of decimal places selected are included.</td></tr>
<tr><th>Format as time</th><td>If you are calculating are times which you want shown as <em>days</em>:<em>hours</em>:<em>minutes</em>:<em>seconds</em>, check the <strong>Time format</strong> box. Check <strong>Unit is minutes</strong> if the times you are using do not include seconds, and check or uncheck <strong>Show days</strong> according to whether or not you want values of 24 hours or more to be shown with the number of days followed by a colon at the beginning of the result. (Note: If your times are minutes and seconds and you don't want hours shown for values of 60 minutes or more, checking <strong>Unit is minutes</strong> and unchecking <strong>Show days</strong> will accomplish this, since calculating minutes and seconds without days or hours is identical to calculating hours and minutes without days or seconds.)</td></tr>
<tr><th>New column</th><td>
<table class=optionsTable>
<tr><th>Tabbed</th><td>Check to use a tab to separate the new column from the existing selection; uncheck to pad with spaces so as to leave one space between edge of the existing selection and the new column.</td></tr>
<tr><th>Numeric&nbsp;aligned</th><td>Check to align results as numbers; uncheck to leave results left-justified.</td></tr>
<tr><th>Insert&nbsp;at&nbsp;left</th><td>Check to insert the new column at the left of the selection; uncheck to insert on the right.</td></tr>
</table></td></tr>
</table>

<h3>How Columns++ recognizes numbers</h3>

<p>Numbers can include thousands separators and decimals. The <strong>Decimal separator is comma</strong> item near the bottom of the <strong>Columns++</strong> menu determines whether the comma or the period is the decimal separator; thousands separators may be a space, an apostrophe, or whichever of comma or period is not the decimal separator. Numbers can also be times, using colons to separate days, hours, minutes and seconds. For <strong>Add numbers</strong> and <strong>Average numbers</strong>, when only a single colon is used, the values can be either hours and minutes or minutes and seconds, so an additional colon will not be introduced in the results; when two or three colons are used, the rightmost value is assumed to be seconds. As described above, <strong>Calculate</strong> offers more explicit options to define how times are interpreted and presented.</p>

<p>There is some flexibility in what can be included along with a number in a column. Common currency signs can precede the number with or without a space, and a minus sign can precede or follow a currency sign. Non-numeric characters (such as units, like “mg” or “ft”) can follow the number. (These are not interpreted, though; <strong>Columns++</strong> will add 5 yards and 5 inches to get 10 without complaint.) Non-numeric characters can precede the number if they are separated from the number by at least one space.</p>

<p><strong>Add numbers</strong> and <strong>Average numbers</strong> will skip items that have no digits; but if an item which includes one or more digits cannot be unambiguously interpreted as a number, <strong>Columns++</strong> will select the item and will not perform the calculation. In <strong>Calculate</strong> <a href="#formulas">formulas</a>, variables and functions which represent numbers in the document are set to <em>Not-a-Number</em> if the associated document text cannot be unambiguously interpreted as a number.</p>

</section>

<section id=formulas><h2>Formulas</h2>

<p><strong>Formulas</strong> are representations of mathematical computations. <strong>Columns++</strong> uses the <a href="https://github.com/ArashPartow/exprtk">ExprTk (Expression Toolkit)</a> package to implement formulas used by the <a href="#calculation-rows">Calculate...</a> command. Following are descriptions of the variables and functions defined by <strong>Columns++</strong>, along with some general features of the syntax of ExprTk expressions.</p>

<h3>Numeric values in formulas</h3>

<p>Numeric values are represented internally as <a href="https://en.wikipedia.org/wiki/Double-precision_floating-point_format">double precision floating point</a> numbers. Any number up to 9,007,199,254,740,992 without a fraction or decimal, positive or negative, is represented exactly. Most fractions and decimals cannot be represented exactly, but in ordinary use, rounding to a reasonable number of decimal places (so that the total number of digits before and after the decimal is under 15) will make discrepancies irrelevant.</p>

<p>Wherever a numeric value is used, it is also possible for the value to be <em>Not-a-Number</em>, an indication that something which was expected to produce a number failed to do so. This can happen because you tried to get a number from the document, but the associated text could not be unambiguously interpreted as a number. It can also be the result of an undefined mathematical operation, such as dividing by zero. In most cases, if any of the inputs to an operation or function are <em>Not-a-Number</em>, the result is also <em>Not-a-Number</em>. When the result of a formula is <em>Not-a-Number</em>, <strong>Columns++</strong> does not insert any text (aside from a tab and/or spaces needed to keep columns aligned).</p>

<h3>Variables and functions implemented by <strong>Columns++</strong></h3>

<p>When <strong>Calculate</strong> is applied to a rectangular selection, the formula given is evaluated once for each row of the selection (or, if a regular expression is given and <strong>Skip unmatched lines</strong> is checked, for each row in which the regular expression matches). The term <em>row</em> refers to the part of a single line in the document which is included in the rectangular selection, and the term <em>current row</em> is the row for which the formula is being evaluated, and into which the results of the formula will be inserted. Rows are processed in sequence, from top to bottom.</p>

<table class=optionsTable>
<tr><th>count</th><td>the total number of rows (lines) in the selection</td></tr>
<tr><th>index</th><td>counting from one, the row number within the selection of the current row</td></tr>
<tr><th>match</th><td>zero if no regular expression was given or if the regular expression did not match in the current row; otherwise, counting from one and including the current row, the number of rows on which the regular expression has matched</td></tr>
<tr><th>line</th><td>the line number of line containing the current row (within the entire document, counting from one; that is, the same as the line number shown in the left margin if line numbers are enabled in <strong>Notepad++</strong>)</td></tr>
<tr><th>this</th><td>if a regular expression was given, the numeric value of the text matched by the regular expression; otherwise, the numeric value of the current row</td></tr>
<tr><th>
col
<br>col(<em>n</em>)
<br>col(<em>n</em>,<em>p</em>)
<br>col(<em>n</em>,<em>p</em>,<em>v</em>)
<br>
<br>tab
<br>tab(<em>n</em>)
<br>tab(<em>n</em>,<em>p</em>)
<br>tab(<em>n</em>,<em>p</em>,<em>v</em>)
<br>
<br>reg
<br>reg(<em>n</em>)
<br>reg(<em>n</em>,<em>p</em>)
<br>reg(<em>n</em>,<em>p</em>,<em>v</em>)
</th><td>
These functions retrieve the numeric value in the specified segment within a row (the selected part of a line). The <strong>col</strong> function divides the segments by white space (any run of blanks and/or tabs). The <strong>tab</strong> function divides by tab characters. The <strong>reg</strong> function retrieves regular expression capture groups.
<table class=optionsTable>
<tr><th><em>n</em></th><td>the column, tab or capture group to retrieve, numbering from one; if omitted or zero, <strong>col</strong> and <strong>tab</strong> return the entire row (the selected part of the line), while <strong>reg</strong> returns the portion of the row matched by the regular expression</td></tr>
<tr><th><em>p</em></th><td>if given, the number of rows previous to the current one from which the value is to be retrieved; if omitted or zero, the current row is accessed. If a regular expression is specified and <strong>Skip unmatched lines</strong> is checked, unmatched lines will be ignored when counting backward to previous lines.</td></tr>
<tr><th><em>v</em></th><td>a numeric value to use instead of <em>Not-a-Number</em> if there are not <strong><em>p</em></strong> previous rows, if there are not <strong><em>n</em></strong> columns, tabs or capture grouns in the indicated row, or if the indicated text cannot be unambiguously interpreted as a number</td></tr>
</table>
</td></tr>
<tr><th>
last
<br>last(<em>p</em>)
<br>last(<em>p</em>,<em>v</em>)
</th><td>
<p>The <strong>last</strong> function with no arguments represents the last result of a calculation that was not <em>Not-a-Number</em>; if the current row is the first row, or if no previous calculations have resulted in anything other than <em>Not-a-Number</em>, <strong>last</strong> is zero.<p>
<p>When <strong><em>p</em></strong> or <strong><em>p</em></strong> and <strong><em>v</em></strong> are specified, they are interpreted as for <strong>col</strong>/<strong>tab</strong>/<strong>reg</strong>, except that <strong><em>p</em></strong> cannot be zero; the function retrieves the result of the calculation on the row indicated, substituting <strong><em>v</em></strong>, if specified, for <em>Not-a-Number</em>.</p>
</td></tr>
</table>

<h3>Syntax of formulas</h3>

<p>Formulas are written using most of the common conventions for writing mathematical expressions in typical programming languages: numbers are written with an optional minus sign, digits and an optional decimal point (no commas); <strong>+</strong>, <strong>-</strong>, <strong>*</strong>, <strong>/</strong>, <strong>%</strong> and <strong>^</strong> indicate addition, subtraction, multiplication, division, remainder and exponentiation; parentheses are used to indicate order of operations. You can also use logical expressions built from common operators, including <strong>=</strong> or <strong>==</strong>, <strong>!=</strong> or <strong>&lt;&gt;</strong>, <strong>&lt;</strong>, <strong>&lt;=</strong>, <strong>&gt;</strong>, <strong>&gt;=</strong>, <strong>&amp;</strong> and <strong>|</strong>, in a conditional expression:</p>

<table class=optionsTable>
<tr><th><em>test</em> ? <em>option1</em> : <em>option2</em></th><td>yields <strong><em>option1</em></strong> if <strong><em>test</em></strong> is true, <strong><em>option2</em></strong> if <strong><em>test</em></strong> is false</td></tr>
</table>

<p>so <strong>col(1)>10?col(2):col(3)</strong> gives the content of column 2 if column 1 is greater than 10, otherwise the content of column 3.</p>

<p>Formulas can use the many functions built into ExprTk, including these common mathematical functions:</p>

<table class=optionsTable>
<tr><th>abs</th><td>absolute value</td></tr>
<tr><th>avg</th><td>average of any number of values</td></tr>
<tr><th>ceil</th><td>smallest integer greater than or equal to</td></tr>
<tr><th>erf</th><td>error function</td></tr>
<tr><th>erfc</th><td>complimentary error function</td></tr>
<tr><th>exp</th><td>e to the power of the given value</td></tr>
<tr><th>floor</th><td>largest integer less than or equal to</td></tr>
<tr><th>frac</th><td>fractional (decimal) part</td></tr>
<tr><th>hypot</th><td>hypotenuse of a right triangle from two sides (eg: hypot(x,y) = sqrt(x*x + y*y))</td></tr>
<tr><th>log</th><td>natural logarithm</td></tr>
<tr><th>log10</th><td>base 10 logarithm</td></tr>
<tr><th>log2</th><td>base 2 logarithm</td></tr>
<tr><th>max</th><td>largest of any number of values</td></tr>
<tr><th>min</th><td>smallest of any number of values</td></tr>
<tr><th>ncdf</th><td>normal cumulative distribution function</td></tr>
<tr><th>round</th><td>round to the nearest integer</td></tr>
<tr><th>roundn</th><td>round the first argument to the number of decimal places specified by the second argument</td></tr>
<tr><th>sqrt</th><td>square root</td></tr>
<tr><th>trunc</th><td>integer part (round down)</td></tr>
</table>

<p>and trigonometric functions (in all cases, angles are expressed in radians):</p>

<table class=optionsTable>
<tr><th>acos</th><td>arc cosine; interval [-1,+1]</td></tr>
<tr><th>acosh</th><td>inverse hyperbolic cosine</td></tr>
<tr><th>asin</th><td>arc sine; interval [-1,+1]</td></tr>
<tr><th>asinh</th><td>inverse hyperbolic sine</td></tr>
<tr><th>atan</th><td>arc tangent; interval [-1,+1]</td></tr>
<tr><th>atan2</th><td>two-argument arc tangent; interval [-pi,+pi]</td></tr>
<tr><th>atanh</th><td>inverse hyperbolic tangent</td></tr>
<tr><th>cos</th><td>cosine</td></tr>
<tr><th>cosh</th><td>hyperbolic cosine</td></tr>
<tr><th>cot</th><td>cotangent</td></tr>
<tr><th>csc</th><td>cosecant</td></tr>
<tr><th>deg2grad</th><td>convert from degrees to gradians</td></tr>
<tr><th>deg2rad</th><td>convert from degrees to radians</td></tr>
<tr><th>grad2deg</th><td>convert from gradians to degrees</td></tr>
<tr><th>rad2deg</th><td>convert from radians to degrees</td></tr>
<tr><th>sec</th><td>secant</td></tr>
<tr><th>sin</th><td>sine</td></tr>
<tr><th>sinc</th><td>sine cardinal</td></tr>
<tr><th>sinh</th><td>hyperbolic sine</td></tr>
<tr><th>tan</th><td>tangent</td></tr>
<tr><th>tanh</th><td>hyperbolic tangent</td></tr>
</table>

<p>ExprTk expressions have many more features which are described in Sections 8, 12, 13 and 20 of the <a href="https://github.com/ArashPartow/exprtk#readme">documentation</a> for ExprTk. <strong>Columns++</strong> supports the <strong>return</strong> call (section 20 of the ExprTk documentation). The returned strings and scalar values will be concatenated and inserted in the new column; if two or more scalar values are specified without intervening strings they will be separated by a tab character (if <strong>Tabbed</strong> is checked) or a single space. The concatenated string will be left aligned, regardless of whether <strong>Numeric aligned</strong> is checked.</p>

</section>

<section id=alignment><h2>Alignment</h2>

<p><strong>Align left</strong>, <strong>Align right</strong> and <strong>Align numeric</strong> process rectangular selections. The selection can be a single column, or multiple columns separated by elastic tabs. (These commands can be used on selections that include traditional fixed tabs; but the results may not be as expected, since they treat tabs as logical separators, ignoring physical positioning.)</p>

<p>The <strong>Decimal separator is comma</strong> item near the bottom of the <strong>Columns++</strong> menu determines whether the comma or the period is the decimal separator for <strong>Align numeric</strong>. Numbers are recognized in a similar (but somewhat more lenient) fashion as for calculation; the alignment of items which are not recognized as numbers is unchanged. </p>

</section>

<section id=sorting><h2>Sorting</h2>

<p><strong>Notepad++</strong> supports sorting lines using a rectangular selection to define the sort keys, but this does not work as expected when tabs (whether elastic or traditional fixed) are used. The sort commands in <strong>Columns++</strong> use a rectangular selection to identify the sort keys and work as expected when tabs are present. These are “stable” sorts, meaning the order of lines with equal sort keys is unchanged. There are three variants of ascending and descending sorts:</p>

<table class=optionsTable>
<tr><th>binary</th><td>The raw byte values of the internal representations of the selected sort strings are used as sort keys. For most purposes, this matches what you would expect from a “case sensitive” sort, with the sort order dependent on the active code page. Unicode files sort by code point.</td></tr>
<tr><th>locale</th><td>The sort order is defined by the current Windows locale. For most purposes, this matches what you would expect from a “case insensitive” sort.</td></tr>
<tr><th>numeric</th><td>The selections on each line are interpreted as tab-separated numbers in the same way as described for the Calculation functions. Items which can’t be interpreted as numbers sort first (whether the sort is ascending or descending).</td></tr>
</table>

<h3>Custom sorts</h3>

<p>In addition to the six immediate sort commands on the <strong>Columns++</strong> menu, you can use the <strong>Sort...</strong> command to open a dialog giving you more control over the details of the sort:</p>

<table class=optionsTable>
<tr><th colspan=2 class=group>What to sort</th></tr>
<tr><th>Whole lines</th><td>Individual lines remain intact and are sorted using the column selection to define the sort keys.</td></tr>
<tr><th>Selected text only</th><td><p>Only the selected portions of lines are sorted; the surrounding text on each line remains in place.</p>
<p><em>Note: This will result in blank-padding lines in the selection which do not extend to or past the right boundary of the column selection. If elastic tabstops are enabled and the number of tabs included in the column selection is different on different lines (for example, because some lines are short), results using <strong>Selected text only</strong> are unlikely to be as expected.</em></p></td></tr>
</table>

<table class=optionsTable>
<tr><th colspan=2 class=group>Sort type</th></tr>
<tr><th>Ascending</th><td>Smaller numbers, or characters earlier in the collating sequence, come first.</td></tr>
<tr><th>Descending</th><td>Larger numbers, or characters later in the collating sequence, come first.</td></tr>
<tr><th>Binary</th><td>The raw byte values of the internal representations of the selected sort strings are used as sort keys. For most purposes, this matches what you would expect from a “case sensitive” sort, with the sort order dependent on the active code page. Unicode files sort by code point.</td></tr>
<tr><th>Locale</th><td>The sort order is defined by a Windows locale, as specified in the <strong>Locale sort details</strong> section.</td></tr>
<tr><th>Numeric</th><td>Sort strings are interpreted as numbers in the same way as described for the Calculation functions. Strings which can’t be interpreted as numbers sort first (whether the sort is ascending or descending). When <strong>Regular expression</strong> is selected, the regular expression is used to parse the selected text on each line; in all other cases, the text is interpreted as a sequence of tab-separated values.</td></tr>
</table>

<table class=optionsTable>
<tr><th colspan=2 class=group>Sort key</th></tr>
<tr><th>Entire column</th><td>The selected text on each line is used as the sort key.</td></tr>
<tr><th>Ignore surrounding blanks/tabs</th><td>For <strong>Binary</strong> and <strong>Locale</strong> sorts, leading and trailing blanks and tabs in the text selected on each line are ignored, and the remaining text is used as the sort key. For <strong>Numeric</strong> sorts, this option behaves the same as <strong>Entire column</strong> (the text is treated as tab-separated values regardless of which option is selected, which is the same as the immediate numeric sorts on the <strong>Columns++</strong> menu).</td></tr>
<tr><th>Tabbed</th><td>The selected text is tab-separated; sort keys must be specified in the <strong>Keys</strong> box.</td></tr>
<tr><th>Regular expression</th><td>A regular expression is used to parse the selected text on each line.</td></tr>
<tr><th>Find what</th><td>Specifies a regular expression. The first match of the expression within the selected text in each line will be used to determine the sort key.</td></tr>
<tr><th>Match case</th><td>When checked, the regular expression match is case sensitive; otherwise, the case of the text is ignored.</td></tr>
<tr><th>Specify keys using capture groups</th><td>When checked, the <strong>Keys</strong> box specifies the sort sequence in terms of capture groups. When unchecked, the text matched by the regular expression is used as the sort key.</td></tr>
<tr><th>Keys</th><td><p>A list of keys, separated by spaces, commas and/or semicolons, to be used for sorting. The major sort key is listed first, with subsequent keys having lower precedence. Each key is designated with a number. If <strong>Tabbed</strong> is selected, the number indicates a tab-separated field, numbered left to right counting from 1; 0 represents the entire selected text in the line. If <strong>Regular expression</strong> is selected, the number is the number of a capture group; 0 represents the entire match.</p>
<p>Each sort key number may be followed (without intervening spaces) by one of the letters <strong>a</strong> or <strong>d</strong>, and/or one of the letters <strong>b</strong>, <strong>l</strong> or <strong>n</strong>. These specify <strong>a</strong>scending, <strong>d</strong>escending, <strong>b</strong>inary, <strong>l</strong>ocale and <strong>n</strong>umeric, overriding the selection in the <strong>Sort type</strong> box for the capture group or tab field to which they are appended.</p></td></tr>
</table>

<table class=optionsTable>
<tr><th colspan=2 class=group>Locale sort details</th></tr>
<tr><td colspan=2><em>Locale sorting makes use of the Windows API function <a href="https://learn.microsoft.com/en-us/windows/win32/api/winnls/nf-winnls-lcmapstringex">LCMapStringEx</a>. The exact behavior of the sort is dependent on the exact behavior of this function; the following attempts to describe the most important points.</em></td></tr>
<tr><th>Language</th><td>Selects the language for which a selection of locales will be offered.</td></tr>
<tr><th>Locale</th><td>Selects a Windows locale from those available for the selected language.</td></tr>
<tr><th>Case sensitive</th><td>Case sensitivity in a linguistic sort is not applied character by character; instead, when and only when two strings match completely except for case, case is applied to further sort them. Consequently, when this box is checked, the result will still not resemble what most users expect of a “case sensitive” sort. When this box is unchecked, the LINGUISTIC_IGNORECASE flag is passed to LCMapStringEx.</td></tr>
<tr><th>Sort digits as numbers</th><td>This causes the sort to attempt to recognize strings including digits — like “data5” and “data10” — in such a way that “data5” will sort before “data10” in an ascending sort instead of after. The same algorithm is used to sort file names in Windows File Explorer. When this box is checked, the SORT_DIGITSASNUMBERS flag is passed to LCMapStringEx.</td></tr>
<tr><th>Ignore diacritics</th><td>Windows API documentation says: <em>Ignore nonspacing characters, as linguistically appropriate. Note: This flag does not always produce predictable results when used with decomposed characters, that is, characters in which a base character and one or more nonspacing characters each have distinct code point values.</em> When this box is checked, the LINGUISTIC_IGNOREDIACRITIC flag is passed to LCMapStringEx.</td></tr>
<tr><th>Ignore symbols and punctuation</th><td>This causes spaces, punctuation and “symbols” (the documentation is not more specific) to be ignored. Strings are sorted as if all the letters and numbers were run together, ignoring spaces, hyphens, periods and so on. When this box is checked, the NORM_IGNORESYMBOLS flag is passed to LCMapStringEx.</td></tr>
</table>

</section>

<section id=conversion><h2>Conversion</h2>

<h3>Convert tabs to spaces</h3>

<p>Use <strong>Convert tabs to spaces</strong> on any selection to replace tabs in the selection with equivalent spaces, taking elastic tabstops into account if enabled. If nothing is selected, the entire file is converted.</p>

<h3>Convert separated values to tabs...<br>Convert tabs to separated values...</h3>

<p>These commands convert the selection, or the entire file if nothing is selected, between delimiter-separated values (typically *.csv, comma-separated values) and tabbed presentation (typically *.tsv or tab-separated values).</p>

<p>Both delimiter-separated values and tab-separated values use a structure comprised of <em>records</em> (rows) containing <em>fields</em> (which are interpreted as being arranged in columns). In tabbed documents, each line of the file is a record, and fields within a record are separated by tabs. Fields cannot contain tabs or line-ending characters as such, but these can be encoded, typically using backslash notation (\t, \n, \r for tab, new line and return). Consistency requires that the encoding character must also be encoded (e.g., two backslashes in the file to represent a single backslash in the field’s value).</p>

<p>In delimiter-separated files, records are divided by line breaks and fields are divided by a separator character, typically a comma. However, when a field contains the separator character or line-ending characters, the problematic characters are <em>escaped</em> rather than encoded, meaning that the original character is still used in the file, but context indicates that it is not to be interpreted as a field or record separator. Typically, quote marks surround a field which contains line-ending or separator characters, and quotes within the field are doubled.</p>

<p>There are many variations in the details of data representation in delimiter-separated and tab-separated values files. When you select <strong>Convert separated values to tabs...</strong> or <strong>Convert tabs to separated values...</strong>, <strong>Columns++</strong> displays a dialog in which you can adjust the conversion accordingly:</p>

<table class=optionsTable>
<tr><th>Column separator</th><td>

<table class=optionsTable>
<tr><th>Comma</th><td rowspan=3>selects the column separator for the separated values.</td></tr>
<tr><th>Semicolon</th></tr>
<tr><th>Vertical line</th></tr>
<tr><th>Other</th><td>
specifies the column separator as any single character within the Unicode Basic Multilingual Plane except for null, line feed or carriage return.</td></tr>
</table>

</td></tr>
<tr><th>Separated values syntax</th><td>

<table class=optionsTable>
<tr><th>Quote</th><td rowspan=2>recognizes quotes and/or apostrophes at the beginning of a field as the start of a quoted field, in which line-ending and separator characters are part of the field value.</td></tr>
<tr><th>Apostrophe</th></tr>
<tr><th>Escape character</th><td>
defines an escape character for separated values. The character following an escape character is used unchanged as a part of the field value, without any special meaning (that is, it doesn’t separate fields or records or begin or end a quoted field).
</td></tr>
<tr><th>Preserve quotes, escapes and blanks when converting to tabbed</th><td>
<p>indicates that quotation marks, apostrophes, escape characters and leading and trailing blanks within separated values fields are copied as is to the tabbed presentation.</p>
<p>This tends to “clutter” the appearance of the tabbed document; however, it makes it possible to “round-trip” to tabs and back to separated values without any change in fields that were not edited. If you intend to convert a separated values file to tabbed presentation for ease of editing and there are non-standard details in the way quotes, escapes or blanks are used in the separated values file which must be preserved when converting back, keep this box checked for both conversions.</p>
<p>When this box is unchecked, <strong>Columns++</strong> quotes or escapes fields containing leading blanks or quotes anywhere in the field when converting from tabbed presentation to separated values. When checked, so long as the field will not cause a parsing failure — such as by containing an unquoted and unescaped separator character, or by beginning with a quote but not being a properly quoted field when taken in its entirety — <strong>Columns++</strong> will preserve the field as is.</p>
</td></tr>
</table>

<tr><th>Tab, new line and return characters in tabbed documents</th><td>
<p>Fields in tabbed presentation cannot contain tabs or line-ending characters; if there are any of these characters in separated values fields, they must be encoded or replaced when converting to tabs.
<table class=optionsTable>
<tr><th>Backslash-style encoding</th><td><p>The specified character (<strong>\</strong> by default) followed by <strong>t</strong>, <strong>n</strong> or <strong>r</strong> encodes a tab, new line or return; the encoding character is doubled to indicate a single occurrence in the data. Encoding is applied when converting from separated values to tabbed presentation and reversed when converting from tabbed presentation to separated values.</p><p>This encoding method, using the backslash as the encoding character, is probably the most commonly-understood way to represent tabs and line-ending characters in tabbed presentation; however, it is inconvenient for reading and editing if the data includes Windows file paths, since all backslash characters in the data are doubled.</p></td></tr>
<tr><th>URL-style encoding</th><td>The specified character (<strong>%</strong> by default) followed by two hexadecimal digits (numeric digits or the letters A-F in either case) encodes a byte value; <strong>%09</strong>, <strong>%0A</strong> and <strong>%0D</strong> encode tab, line feed and return. When converting from separated values to tabbed presentation, these three are encoded; the per cent symbol or other specified character is encoded only if it is followed by two hexadecimal digits. When converting from tabbed presentation to separated values, any occurrence of the specified character followed by two hexadecimal digits is decoded to a byte in the code page active for the file.</td></tr>
<tr><th>Replace when converting to tabbed</th><td>indicates that the disallowed characters are replaced with the text specified when converting to tabbed presentation; no attempt is made to restore the original characters when converting from tabs to separated values.</td></tr>
</table>

</td></tr>
</table>

</section>

<section id=options><h2>Options</h2>

<p><strong>Decimal separator is comma</strong> may be checked or unchecked to control how calculations, numeric alignment and numeric sorts interpret numbers.</p>

<p><strong>Options...</strong> opens a dialog that allows you to control some aspects of <strong>Columns++</strong>:

<table class=optionsTable>
<tr><th>Show Columns++ on the main menu bar.</th><td>lets you choose whether to add an entry for <strong>Columns++</strong> to the main menu bar, just to the left of the <strong>Plugins</strong> menu, or leave it as an entry on the <strong>Plugins</strong> menu.</td></tr>
<tr><th>Replace: Don't move to the following occurrence.</th><td>has the same effect as the option of the same name on the <strong>Searching</strong> panel of the <strong>Preferences</strong> dialog in <strong>Notepad++</strong>, but for the <strong>Search in indicated region</strong> dialog in <strong>Columns++</strong>. When checked, the <strong>Replace</strong> button in the search dialog does not immediately perform another find after replacing text; in effect, the button alternates between finding and replacing, giving you a chance to see the effect of the replace before moving to the next occurrence of the search string.</td></tr>
<tr id="options-autoextend"><th>Automatically extend selections to form rectangles:</th><td>You can enable “implicit” selections for <strong>Columns++</strong> commands that require rectangular selections, bypassing the dialogs that ask you if you want to make a rectangular selection:
<table class=optionsTable>
<tr><th>Selections on one line extend downward to the last line.</th>
<td>A selection of one or more characters on a single line is “projected” downward to the last line of the file. This allows you to select full columns (skipping headers, if desired) without scrolling all the way to the end of the file. If the last line of the file is completely empty (that is, the file ends with an end-of-line sequence) that line will not be included in the selection.</td></tr>
<tr><th>Full row selections are replaced by the enclosing rectangle.</th>
<td>A single selection of complete lines is replaced by a rectangular selection wide enough to include all the text on all lines in the selection. Usually you get this kind of selection by dragging in the left margin. If the selection ends at the beginning of a line (as when dragging downward in the left margin), that line is not included in the rectangular selection. The selection made by <strong>Edit|Select All</strong> will be converted to a rectangular selection that encompasses the entire file (excluding the last line, if it consists of only a line ending).</td></tr>
<tr><th>Zero-width selections extend right to the end of the longest line.</th>
<td>A “thin” selection, or a rectangular selection containing no characters or virtual space, is extended to the right far enough to enclose the end of the longest line in the selection. When selecting a rectangular region meant to extend from some column far enough to the right include the ends of all lines, this avoids the need to scroll through and figure out how wide the selection needs to be.</td></tr>
</table>
</td></tr>
</table>

<p><strong>Help/About...</strong> provides access to release/version identification, this help file, and changelog, license and source information.</p>

</section>

</article>

</main><footer id=footer><div id=foottext class=linklist>

<a href="https://notepad-plus-plus.org/">Notepad++</a> • <a href="http://www.coises.com/">coises.com (author’s web site)</a> • <a href="https://github.com/Coises/ColumnsPlusPlus">Columns++ on GitHub</a>

</div><button type=button id=fontdown onclick="setFontDown();">Txt-</button><button type=button id=fontup onclick="setFontUp();">Txt+</button>
</footer></body></html>